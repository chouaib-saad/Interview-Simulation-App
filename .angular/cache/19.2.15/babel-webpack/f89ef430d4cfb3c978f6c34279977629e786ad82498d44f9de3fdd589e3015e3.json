{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class InterviewGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route) {\n    const interviewStarted = localStorage.getItem('interviewStarted') === 'true';\n    const interviewCompleted = localStorage.getItem('interviewCompleted') === 'true';\n    const currentRoute = route.routeConfig?.path;\n    // If interview is completed, only allow access to final screen\n    if (interviewCompleted) {\n      if (currentRoute !== 'final') {\n        this.router.navigate(['/final']);\n        return false;\n      }\n      return true;\n    }\n    // If interview hasn't started, don't allow access to interview or final screens\n    if (!interviewStarted && (currentRoute === 'interview' || currentRoute === 'final')) {\n      this.router.navigate(['/']);\n      return false;\n    }\n    // If interview started but not completed, only allow access to interview screen\n    if (interviewStarted && !interviewCompleted) {\n      if (currentRoute !== 'interview') {\n        this.router.navigate(['/interview']);\n        return false;\n      }\n      return true;\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function InterviewGuard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InterviewGuard)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InterviewGuard,\n      factory: InterviewGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["InterviewGuard","constructor","router","canActivate","route","interviewStarted","localStorage","getItem","interviewCompleted","currentRoute","routeConfig","path","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chouqib Saad\\Desktop\\projectv2\\src\\app\\guards\\interview.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterviewGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const interviewStarted = localStorage.getItem('interviewStarted') === 'true';\n    const interviewCompleted = localStorage.getItem('interviewCompleted') === 'true';\n    const currentRoute = route.routeConfig?.path;\n\n    // If interview is completed, only allow access to final screen\n    if (interviewCompleted) {\n      if (currentRoute !== 'final') {\n        this.router.navigate(['/final']);\n        return false;\n      }\n      return true;\n    }\n\n    // If interview hasn't started, don't allow access to interview or final screens\n    if (!interviewStarted && (currentRoute === 'interview' || currentRoute === 'final')) {\n      this.router.navigate(['/']);\n      return false;\n    }\n\n    // If interview started but not completed, only allow access to interview screen\n    if (interviewStarted && !interviewCompleted) {\n      if (currentRoute !== 'interview') {\n        this.router.navigate(['/interview']);\n        return false;\n      }\n      return true;\n    }\n\n    return true;\n  }\n}"],"mappings":";;AAMA,OAAM,MAAOA,cAAc;EACzBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CAACC,KAA6B;IACvC,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,KAAK,MAAM;IAC5E,MAAMC,kBAAkB,GAAGF,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,KAAK,MAAM;IAChF,MAAME,YAAY,GAAGL,KAAK,CAACM,WAAW,EAAEC,IAAI;IAE5C;IACA,IAAIH,kBAAkB,EAAE;MACtB,IAAIC,YAAY,KAAK,OAAO,EAAE;QAC5B,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb;IAEA;IACA,IAAI,CAACP,gBAAgB,KAAKI,YAAY,KAAK,WAAW,IAAIA,YAAY,KAAK,OAAO,CAAC,EAAE;MACnF,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,OAAO,KAAK;IACd;IAEA;IACA,IAAIP,gBAAgB,IAAI,CAACG,kBAAkB,EAAE;MAC3C,IAAIC,YAAY,KAAK,WAAW,EAAE;QAChC,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpC,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb;IAEA,OAAO,IAAI;EACb;;;uCAjCWZ,cAAc,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAdhB,cAAc;MAAAiB,OAAA,EAAdjB,cAAc,CAAAkB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}