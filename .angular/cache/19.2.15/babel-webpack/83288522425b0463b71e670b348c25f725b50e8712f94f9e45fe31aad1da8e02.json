{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuestionService {\n  constructor(http) {\n    this.http = http;\n    this.questionsUrl = 'assets/questions.json';\n  }\n  getRandomQuestions() {\n    return this.http.get(this.questionsUrl).pipe(map(response => {\n      if (response.status === 'SUCCESS' && response.data?.questions) {\n        return this.selectRandomQuestions(response.data.questions, 4);\n      }\n      throw new Error('Failed to load questions from response');\n    }));\n  }\n  selectRandomQuestions(questions, count) {\n    const shuffled = [...questions].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n  static {\n    this.ɵfac = function QuestionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || QuestionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: QuestionService,\n      factory: QuestionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","QuestionService","constructor","http","questionsUrl","getRandomQuestions","get","pipe","response","status","data","questions","selectRandomQuestions","Error","count","shuffled","sort","Math","random","slice","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chouqib Saad\\Desktop\\projectv2\\src\\app\\services\\question.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\n\nexport interface Question {\n  id: number;\n  question: string;\n}\n\ninterface QuestionsResponse {\n  status: string;\n  error: any;\n  data: {\n    messages: string;\n    questions: Question[];\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  private questionsUrl = 'assets/questions.json';\n\n  constructor(private http: HttpClient) {}\n\n  getRandomQuestions(): Observable<Question[]> {\n    return this.http.get<QuestionsResponse>(this.questionsUrl).pipe(\n      map(response => {\n        if (response.status === 'SUCCESS' && response.data?.questions) {\n          return this.selectRandomQuestions(response.data.questions, 4);\n        }\n        throw new Error('Failed to load questions from response');\n      })\n    );\n  }\n\n  private selectRandomQuestions(questions: Question[], count: number): Question[] {\n    const shuffled = [...questions].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n}"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAmBtC,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,YAAY,GAAG,uBAAuB;EAEP;EAEvCC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAoB,IAAI,CAACF,YAAY,CAAC,CAACG,IAAI,CAC7DP,GAAG,CAACQ,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,MAAM,KAAK,SAAS,IAAID,QAAQ,CAACE,IAAI,EAAEC,SAAS,EAAE;QAC7D,OAAO,IAAI,CAACC,qBAAqB,CAACJ,QAAQ,CAACE,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;MAC/D;MACA,MAAM,IAAIE,KAAK,CAAC,wCAAwC,CAAC;IAC3D,CAAC,CAAC,CACH;EACH;EAEQD,qBAAqBA,CAACD,SAAqB,EAAEG,KAAa;IAChE,MAAMC,QAAQ,GAAG,CAAC,GAAGJ,SAAS,CAAC,CAACK,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC;IAC/D,OAAOH,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAEL,KAAK,CAAC;EACjC;;;uCAnBWb,eAAe,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAftB,eAAe;MAAAuB,OAAA,EAAfvB,eAAe,CAAAwB,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}